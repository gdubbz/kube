apiVersion: v1
items:
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: '{"kind":"Deployment","apiVersion":"extensions/v1beta1","metadata":{"name":"dns-controller","namespace":"kube-system","creationTimestamp":null,"labels":{"k8s-addon":"dns-controller.addons.k8s.io","k8s-app":"dns-controller","version":"v1.5.1"}},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"dns-controller"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"k8s-addon":"dns-controller.addons.k8s.io","k8s-app":"dns-controller","version":"v1.5.1"},"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":"","scheduler.alpha.kubernetes.io/tolerations":"[{\"key\":
        \"dedicated\", \"value\": \"master\"}]"}},"spec":{"containers":[{"name":"dns-controller","image":"kope/dns-controller:1.5.1","command":["/usr/bin/dns-controller","--watch-ingress=false","--dns=aws-route53","--zone=*/Z2GFB244TFDI9K","--zone=*/*","-v=2"],"resources":{"requests":{"cpu":"50m","memory":"50Mi"}}}],"dnsPolicy":"Default","nodeSelector":{"kubernetes.io/role":"master"},"hostNetwork":true}},"strategy":{}},"status":{}}'
    creationTimestamp: 2017-02-26T18:29:25Z
    generation: 1
    labels:
      k8s-addon: dns-controller.addons.k8s.io
      k8s-app: dns-controller
      version: v1.5.1
    name: dns-controller
    namespace: kube-system
    resourceVersion: "143"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/dns-controller
    uid: 8018c674-fc51-11e6-84c4-0234ca55051f
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: dns-controller
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
          scheduler.alpha.kubernetes.io/tolerations: '[{"key": "dedicated", "value":
            "master"}]'
        creationTimestamp: null
        labels:
          k8s-addon: dns-controller.addons.k8s.io
          k8s-app: dns-controller
          version: v1.5.1
      spec:
        containers:
        - command:
          - /usr/bin/dns-controller
          - --watch-ingress=false
          - --dns=aws-route53
          - --zone=*/Z2GFB244TFDI9K
          - --zone=*/*
          - -v=2
          image: kope/dns-controller:1.5.1
          imagePullPolicy: IfNotPresent
          name: dns-controller
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: Default
        hostNetwork: true
        nodeSelector:
          kubernetes.io/role: master
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-02-26T18:29:25Z
      lastUpdateTime: 2017-02-26T18:29:25Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2017-02-26T18:34:37Z
    generation: 2
    labels:
      k8s-addon: monitoring-standalone.addons.k8s.io
      k8s-app: heapster
      kubernetes.io/cluster-service: "true"
      version: v1.2.0
    name: heapster
    namespace: kube-system
    resourceVersion: "611"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/heapster
    uid: 3a39e1f7-fc52-11e6-84c4-0234ca55051f
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: heapster
        version: v1.2.0
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          k8s-app: heapster
          version: v1.2.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/heapster:v1.2.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources:
            limits:
              cpu: 88m
              memory: 204Mi
            requests:
              cpu: 88m
              memory: 204Mi
          terminationMessagePath: /dev/termination-log
        - command:
          - /pod_nanny
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.6
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-02-26T18:34:37Z
      lastUpdateTime: 2017-02-26T18:34:37Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: '{"kind":"Deployment","apiVersion":"extensions/v1beta1","metadata":{"name":"kube-dns","namespace":"kube-system","creationTimestamp":null,"labels":{"k8s-addon":"kube-dns.addons.k8s.io","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true"}},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"k8s-app":"kube-dns"},"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":"","scheduler.alpha.kubernetes.io/tolerations":"[{\"key\":\"CriticalAddonsOnly\",
        \"operator\":\"Exists\"}]"}},"spec":{"containers":[{"name":"kubedns","image":"gcr.io/google_containers/kubedns-amd64:1.9","args":["--domain=cluster.local.","--dns-port=10053","--config-map=kube-dns","--v=2"],"ports":[{"name":"dns-local","containerPort":10053,"protocol":"UDP"},{"name":"dns-tcp-local","containerPort":10053,"protocol":"TCP"},{"name":"metrics","containerPort":10055,"protocol":"TCP"}],"env":[{"name":"PROMETHEUS_PORT","value":"10055"}],"resources":{"limits":{"memory":"170Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"livenessProbe":{"httpGet":{"path":"/healthz-kubedns","port":8080,"scheme":"HTTP"},"initialDelaySeconds":60,"timeoutSeconds":5,"successThreshold":1,"failureThreshold":5},"readinessProbe":{"httpGet":{"path":"/readiness","port":8081,"scheme":"HTTP"},"initialDelaySeconds":3,"timeoutSeconds":5}},{"name":"dnsmasq","image":"gcr.io/google_containers/kube-dnsmasq-amd64:1.4","args":["--cache-size=1000","--no-resolv","--server=127.0.0.1#10053","--log-facility=-"],"ports":[{"name":"dns","containerPort":53,"protocol":"UDP"},{"name":"dns-tcp","containerPort":53,"protocol":"TCP"}],"resources":{"requests":{"cpu":"150m","memory":"10Mi"}},"livenessProbe":{"httpGet":{"path":"/healthz-dnsmasq","port":8080,"scheme":"HTTP"},"initialDelaySeconds":60,"timeoutSeconds":5,"successThreshold":1,"failureThreshold":5}},{"name":"dnsmasq-metrics","image":"gcr.io/google_containers/dnsmasq-metrics-amd64:1.0","args":["--v=2","--logtostderr"],"ports":[{"name":"metrics","containerPort":10054,"protocol":"TCP"}],"resources":{"requests":{"memory":"10Mi"}},"livenessProbe":{"httpGet":{"path":"/metrics","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"timeoutSeconds":5,"successThreshold":1,"failureThreshold":5}},{"name":"healthz","image":"gcr.io/google_containers/exechealthz-amd64:1.2","args":["--cmd=nslookup
        kubernetes.default.svc.cluster.local 127.0.0.1 \u003e/dev/null","--url=/healthz-dnsmasq","--cmd=nslookup
        kubernetes.default.svc.cluster.local 127.0.0.1:10053 \u003e/dev/null","--url=/healthz-kubedns","--port=8080","--quiet"],"ports":[{"containerPort":8080,"protocol":"TCP"}],"resources":{"limits":{"memory":"50Mi"},"requests":{"cpu":"10m","memory":"50Mi"}}}],"dnsPolicy":"Default"}},"strategy":{"rollingUpdate":{"maxUnavailable":0,"maxSurge":"10%"}}},"status":{}}'
    creationTimestamp: 2017-02-26T18:29:24Z
    generation: 2
    labels:
      k8s-addon: kube-dns.addons.k8s.io
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "329"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kube-dns
    uid: 7fc047d3-fc51-11e6-84c4-0234ca55051f
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 10%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-map=kube-dns
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gcr.io/google_containers/kubedns-amd64:1.9
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz-kubedns
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          terminationMessagePath: /dev/termination-log
        - args:
          - --cache-size=1000
          - --no-resolv
          - --server=127.0.0.1#10053
          - --log-facility=-
          image: gcr.io/google_containers/kube-dnsmasq-amd64:1.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz-dnsmasq
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
        - args:
          - --v=2
          - --logtostderr
          image: gcr.io/google_containers/dnsmasq-metrics-amd64:1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq-metrics
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
        - args:
          - --cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null
          - --url=/healthz-dnsmasq
          - --cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 >/dev/null
          - --url=/healthz-kubedns
          - --port=8080
          - --quiet
          image: gcr.io/google_containers/exechealthz-amd64:1.2
          imagePullPolicy: IfNotPresent
          name: healthz
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: Default
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: 2017-02-26T18:31:47Z
      lastUpdateTime: 2017-02-26T18:31:47Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: '{"kind":"Deployment","apiVersion":"extensions/v1beta1","metadata":{"name":"kube-dns-autoscaler","namespace":"kube-system","creationTimestamp":null,"labels":{"k8s-addon":"kube-dns.addons.k8s.io","k8s-app":"kube-dns-autoscaler","kubernetes.io/cluster-service":"true"}},"spec":{"template":{"metadata":{"creationTimestamp":null,"labels":{"k8s-app":"kube-dns-autoscaler"},"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":"","scheduler.alpha.kubernetes.io/tolerations":"[{\"key\":\"CriticalAddonsOnly\",
        \"operator\":\"Exists\"}]"}},"spec":{"containers":[{"name":"autoscaler","image":"gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.0.0","command":["/cluster-proportional-autoscaler","--namespace=kube-system","--configmap=kube-dns-autoscaler","--mode=linear","--target=Deployment/kube-dns","--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"min\":2}}","--logtostderr=true","--v=2"],"resources":{"requests":{"cpu":"20m","memory":"10Mi"}}}]}},"strategy":{}},"status":{}}'
    creationTimestamp: 2017-02-26T18:29:24Z
    generation: 1
    labels:
      k8s-addon: kube-dns.addons.k8s.io
      k8s-app: kube-dns-autoscaler
      kubernetes.io/cluster-service: "true"
    name: kube-dns-autoscaler
    namespace: kube-system
    resourceVersion: "299"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kube-dns-autoscaler
    uid: 7fb7432b-fc51-11e6-84c4-0234ca55051f
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --mode=linear
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"min":2}}
          - --logtostderr=true
          - --v=2
          image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.0.0
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-02-26T18:29:24Z
      lastUpdateTime: 2017-02-26T18:29:24Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2017-02-26T18:33:26Z
    generation: 1
    labels:
      k8s-addon: kubernetes-dashboard.addons.k8s.io
      k8s-app: kubernetes-dashboard
      kubernetes.io/cluster-service: "true"
      version: v1.5.0
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "470"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kubernetes-dashboard
    uid: 0fd0836e-fc52-11e6-84c4-0234ca55051f
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          k8s-addon: kubernetes-dashboard.addons.k8s.io
          k8s-app: kubernetes-dashboard
          kubernetes.io/cluster-service: "true"
          version: v1.5.0
      spec:
        containers:
        - image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 9090
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2017-02-26T18:33:26Z
      lastUpdateTime: 2017-02-26T18:33:26Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata: {}
resourceVersion: ""
selfLink: ""
